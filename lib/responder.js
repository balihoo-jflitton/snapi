// Generated by CoffeeScript 2.5.1
'use strict';
var Promise, Responder, Response, codes, errors, jsonStream, stream;

Promise = require('bluebird');

errors = require('restify-errors');

stream = require('stream');

jsonStream = require('jsonstream2');

Response = require('./response').Response;

codes = {
  successWithBody: 200,
  successNoBody: 204,
  movedPermanently: 301,
  found: 302,
  internalError: 500,
  invalidCredentials: 401,
  notAuthorized: 403
};

module.exports = Responder = (function() {
  class Responder {
    constructor(logger) {
      this.logger = logger;
    }

    errorResponse(err, response, next) {
      this.logger.log.error(err);
      if (err instanceof errors.InvalidCredentialsError) {
        response.header('Www-Authenticate', 'Basic');
      }
      return next(err);
    }

    respondStream(result, response) {
      var ref;
      response.writeHead(200, {
        'Content-Type': 'application/json; charset=utf-8'
      });
      if (result.objectMode || ((ref = result._readableState) != null ? ref.objectMode : void 0)) {
        return result.pipe(jsonStream.stringify()).pipe(response);
      } else {
        return result.pipe(response);
      }
    }

    respond(result, response, next) {
      var body, header, ref, statusCode, value;
      if (result instanceof Error) {
        return this.errorResponse(result, response, next);
      }
      if (result instanceof stream.Stream) {
        return this.respondStream(result, response);
      }
      // Send the result as the body and 200 or 204 based on result being defined and non-null
      body = result;
      statusCode = result != null ? codes.successWithBody : codes.successNoBody;
      if (result instanceof Response) {
        ref = result.headers;
        // Override the default behavior, allowing the caller to specify response code, headers, and body
        for (header in ref) {
          value = ref[header];
          response.header(header, value);
        }
        body = result.body;
        statusCode = result.statusCode;
      }
      response.send(statusCode, body);
      return next();
    }

  };

  Responder.prototype.codes = codes;

  return Responder;

}).call(this);
