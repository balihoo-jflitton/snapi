// Generated by CoffeeScript 2.5.1
'use strict';
/*
  Define a special toJSON property for serializing Error objects
  Allows logging of custom properties including nested Error objects
*/
var Bunyan, Logger, errorToJson;

Bunyan = require('bunyan');

errorToJson = {
  configurable: true,
  value: function() {
    var alt, storeKey;
    alt = {};
    storeKey = function(key) {
      return alt[key] = this[key];
    };
    Object.getOwnPropertyNames(this).forEach(storeKey, this);
    return alt;
  }
};

Object.defineProperty(Error.prototype, 'toJSON', errorToJson);

module.exports = Logger = class Logger {
  constructor(opts) {
    var logConfig;
    opts.log = opts.log || {};
    if (opts.log.logger) {
      // User provided their own logger
      this.log = opts.log.logger;
    } else {
      // Use bunyan for logging
      logConfig = {};
      logConfig.name = opts.name || 'snapi';
      logConfig.streams = opts.log.streams || [
        {
          path: opts.log.path || './snapi.log',
          type: opts.log.type || 'rotating-file',
          level: opts.log.level || 'warn',
          period: opts.log.period || '1d',
          count: opts.log.count || 10
        }
      ];
      this.log = new Bunyan(logConfig);
    }
  }

  unhandledRejection() {
    return (err) => {
      return this.log.error({
        unhandledRejection: true,
        err: err
      }, err.message);
    };
  }

  unhandledProcessException() {
    return (err) => {
      return this.log.fatal({
        unhandledProcessException: true,
        err: err
      }, err.message);
    };
  }

  unhandledRestifyException() {
    return (req, res, route, err) => {
      this.log.error({
        unhandledRestifyException: true,
        req: req,
        res: res,
        route: route,
        err: err
      }, err.message);
      if (!res.headersSent) {
        return res.send(500, 'Internal server error');
      }
    };
  }

};
