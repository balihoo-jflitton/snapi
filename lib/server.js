// Generated by CoffeeScript 2.5.1
'use strict';
var Logger, Promise, Responder, addMiddleware, addParsers, configureLogging, error, initializeSwagger, response, restify, restifyPlugins, router, swaggerParameterReplacer, swaggerTools;

Promise = require('bluebird');

restify = require('restify');

restifyPlugins = require('restify-plugins');

swaggerTools = require('swagger-tools');

Logger = require('./logger');

Responder = require('./responder');

router = require('./router');

error = require('./error');

swaggerParameterReplacer = require('./middleware/swaggerParameterReplacer');

response = require('./response');

exports.Response = response.Response;

exports.RedirectResponse = response.RedirectResponse;

addParsers = function(server, parsers) {
  var i, len, parser, results;
  if (Array.isArray(parsers)) {
// User specified parsers to use
    results = [];
    for (i = 0, len = parsers.length; i < len; i++) {
      parser = parsers[i];
      results.push(server.use(parser.parser(parser.options)));
    }
    return results;
  } else {
    // Use the default parsers
    server.use(restifyPlugins.bodyParser({
      mapParams: false
    }));
    server.use(restifyPlugins.authorizationParser());
    return server.use(restifyPlugins.queryParser());
  }
};

addMiddleware = function(server, middleware) {
  var i, len, middlewareFunc, results;
  if (Array.isArray(middleware)) {
    results = [];
    for (i = 0, len = middleware.length; i < len; i++) {
      middlewareFunc = middleware[i];
      if (typeof middlewareFunc === 'function') {
        results.push(server.use(middlewareFunc));
      } else {
        results.push(void 0);
      }
    }
    return results;
  }
};

configureLogging = function(server, opts) {
  var logger;
  logger = new Logger(opts);
  // Set up logging
  server.on('after', restifyPlugins.auditLogger({
    name: 'audit',
    log: logger.log
  }));
  Promise.onPossiblyUnhandledRejection(logger.unhandledRejection());
  process.on('uncaughtException', logger.unhandledProcessException());
  server.on('uncaughtException', logger.unhandledRestifyException());
  return server.logger = logger;
};

initializeSwagger = function(server, opts) {
  if (!opts.api) {
    throw new error.MissingApiConfigError();
  }
  return new Promise(function(resolve) {
    return swaggerTools.initializeMiddleware(opts.api, function(swaggerMiddleware) {
      // Interpret Swagger resources and attach metadata to request.swagger
      server.use(swaggerMiddleware.swaggerMetadata());
      
      // Validate requests against the swagger metadata
      server.use(swaggerMiddleware.swaggerValidator());
      
      // Replace the swagger parameter values with those provided by restify since swagger doesn't URLdecode
      server.use(swaggerParameterReplacer());
      return resolve();
    });
  });
};

exports.createServer = function(opts) {
  var server;
  server = void 0;
  return Promise.try(function() {
    opts = opts || {};
    opts.restify = opts.restify || {};
    opts.middleware = opts.middleware || {};
    server = restify.createServer(opts.restify);
    addParsers(server, opts.parsers);
    addMiddleware(server, opts.middleware.afterParsers);
    configureLogging(server, opts);
    server.responder = new Responder(server.logger, opts.responder);
    return initializeSwagger(server, opts);
  }).then(function() {
    var i, len, results, staticRoute, staticRoutes;
    addMiddleware(server, opts.middleware.beforeRoutes);
    // Add routes
    router.registerRoutes(server, opts.api, opts);
    // Add static serving if specified
    staticRoutes = opts.serveStatic || [];
    if (!staticRoutes.length) { // assume if we have an object if there is no length operator
      staticRoutes = [staticRoutes];
    }
// now add any defined static routes to restify
    results = [];
    for (i = 0, len = staticRoutes.length; i < len; i++) {
      staticRoute = staticRoutes[i];
      results.push(server.get(staticRoute.url, restifyPlugins.serveStatic(staticRoute)));
    }
    return results;
  }).return(server);
};
